apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: geocoder-template
metadata:
  name: geocoder-template

  annotations:
    openshift.io/display-name: "DataBC Geocoder API"
    description: >-
      An example Geocoder API application with a Cassandra cluster,
      a Data Admin WebApp and a Geocoder API. For more information
      about using this template, including OpenShift considerations, see
      https://docs.openshift.com/container-platform/4.6/openshift_images/using-templates.html.


      WARNING: Any data stored will be lost upon pod destruction. Only use this
      template for testing."
    openshift.io/long-description: >-
      This template defines resources needed to develop a Geoccoder API
      application, including a build configuration, application DeploymentConfig, and
      configuration database DeploymentConfig.  The database is stored in
      persistent storage.

    tags: "geocoder,java,gis,location"
    iconClass: icon-spring
    openshift.io/provider-display-name: "Data Systems and Services, DataBC"
    openshift.io/documentation-url: "https://github.com/bcgov/ols-geocoder"
    openshift.io/support-url: "https://access.redhat.com"
message: |-
  Your admin credentials are ${ADMIN_USERNAME}:${ADMIN_PASSWORD}
  The following objects have been created in you project:

  StatefulSet
    cassandra-${APP_NAME} - Cassandra cluster

  ReplicaSet
    ${APP_NAME}-${ENV}-web   - Geocoder Web API
    ${APP_NAME}-${ENV}-admin - Admin WebApp

  Service
    cassandra-${APP_NAME} - Cassandra
    ${APP_NAME}-${ENV}-web   - Geocoder Web API
    ${APP_NAME}-${ENV}-admin - Admin WebApp

  Route
    N/A - Routes are configured with the Kong Gateway

  DeploymentConfig
    N/A

  Deployment
    N/A

  NetworkPolicy
    allow-from-openshift-ingress
    allow-same-namespace
    deny-by-default
    allow-traffic-from-gateway-to-${APP_NAME}-${ENV}

parameters:

  - name: "APP_NAME"
    description: "name of app"
    value: geocoder
    required: true
  - name: "ENV"
    description: "environment"
    value: dev
    required: true
  - name: "TOOLS_NAMESPACE"
    description: "tools namespace where build will be"
    value: tools_namespace
    required: true

  - name: "GEOCODER_IS_TAG"
    description: "The image stream tag to use for the geocoder-sidecar"
    required: true
  - name: "DATA_ADMIN_IS_TAG"
    description: "The image stream tag to use for the ols-admin-sidecar"
    required: true

objects:
  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ENV}-admin-route
      labels:
        app: ${APP_NAME}-${ENV}-admin
    spec:
      host: ${APP_NAME}-admin-${ENV}.apps.silver.devops.gov.bc.ca
      to:
        kind: Service
        name: ${APP_NAME}-${ENV}-admin-service
        weight: 100
      port:
        targetPort: ${APP_NAME}-${ENV}-admin
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None

  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: ${APP_NAME}-${ENV}-web
      name: ${APP_NAME}-${ENV}-web-service
    spec:
      ports:
        - name: ${APP_NAME}-${ENV}-web
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: ${APP_NAME}-${ENV}-web
      sessionAffinity: None
      type: ClusterIP

  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: ${APP_NAME}-${ENV}-admin
      name: ${APP_NAME}-${ENV}-admin-service
    spec:
      ports:
        - name: ${APP_NAME}-${ENV}-admin
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: ${APP_NAME}-${ENV}-admin
      sessionAffinity: None
      type: ClusterIP

  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: cassandra-${APP_NAME}
      name: cassandra-${APP_NAME}
    spec:
      clusterIP: None
      ports:
        - port: 9042
          protocol: TCP
          targetPort: 9042
      selector:
        app: cassandra-${APP_NAME}
      sessionAffinity: None
      type: ClusterIP

  - kind: StatefulSet
    apiVersion: apps/v1
    metadata:
      labels:
        app: cassandra-${APP_NAME}
        statefulset: cassandra-${APP_NAME}
      name: cassandra-${APP_NAME}
    spec:
      podManagementPolicy: OrderedReady
      replicas: 3
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          statefulset: cassandra-${APP_NAME}
      serviceName: cassandra-${APP_NAME}
      template:
        metadata:
          labels:
            app: cassandra-${APP_NAME}
            statefulset: cassandra-${APP_NAME}
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: statefulset
                    operator: In
                    values:
                    - cassandra-${APP_NAME}
                topologyKey: kubernetes.io/hostname
          containers:
          - command:
            - /docker-entrypoint.sh
            - -R
            env:
            - name: MAX_HEAP_SIZE
              value: 2500M
            - name: HEAP_NEWSIZE
              value: 100M
            - name: CASSANDRA_LISTEN_ADDRESS
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: CASSANDRA_SEEDS
              value: cassandra-${APP_NAME}-0.cassandra-${APP_NAME}
            - name: CASSANDRA_CLUSTER_NAME
              value: k8s
            - name: CASSANDRA_DC
              value: DC1
            - name: CASSANDRA_RACK
              value: Rack1
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: GossipingPropertyFileSnitch
            image: docker-remote.artifacts.developer.gov.bc.ca/cassandra:3.11.2
            pullSecret:
              name: artifactory-creds
            imagePullPolicy: Always
            lifecycle:
              preStop:
                exec:
                  command:
                  - /bin/sh
                  - -c
                  - nodetool drain
            name: cassandra-${APP_NAME}
            ports:
            - containerPort: 7000
              name: intra-node
              protocol: TCP
            - containerPort: 7001
              name: tls-intra-node
              protocol: TCP
            - containerPort: 7199
              name: jmx
              protocol: TCP
            - containerPort: 9042
              name: cql
              protocol: TCP
            resources:
              limits:
                cpu: 500m
                memory: 4Gi
              requests:
                cpu: 250m
                memory: 1Gi
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /var/lib/cassandra
              name: cassandra-data
            - mountPath: /var/log/cassandra
              name: cassandra-logs
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir: {}
            name: cassandra-logs
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate
      volumeClaimTemplates:
      - metadata:
          name: cassandra-data
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          storageClassName: netapp-block-standard

  - kind: ReplicaSet
    apiVersion: apps/v1
    metadata:
      annotations:
      labels:
        app: ${APP_NAME}-${ENV}-web
      name: ${APP_NAME}-${ENV}-web
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ${APP_NAME}-${ENV}-web
      template:
        metadata:
          labels:
            app: ${APP_NAME}-${ENV}-web
        spec:
          containers:
            - command:
                - catalina.sh
                - run
              env:
                - name: CATALINA_BASE
                  value: /usr/local/tomcat
                - name: LogFilePath
                  value: /usr/local/tomcat/logs/bgeo.log
                - name: OLS_CASSANDRA_LOCAL_DATACENTER
                  value: DC1
                - name: OLS_CASSANDRA_CONTACT_POINT
                  value: cassandra-${APP_NAME}
              image: 'docker-remote.artifacts.developer.gov.bc.ca/tomcat:9-jre11-slim'
              pullSecret:
                name: artifactory-creds
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  cpu: "2"
                  memory: 6Gi
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 45
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 1
              name: api
              ports:
                - containerPort: 8080
                  name: catalina-http
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /ping
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 255
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /usr/local/tomcat/logs
                  name: tc-work
                - mountPath: /usr/local/tomcat/work
                  name: tc-work
                - mountPath: /usr/local/tomcat/temp
                  name: tc-work
                - mountPath: /usr/local/tomcat/conf/Catalina
                  name: tc-conf
                - mountPath: /usr/local/tomcat/webapps
                  name: app-volume
          dnsPolicy: ClusterFirst
          initContainers:
            - command:
                - cp
                - /geocoder.war
                - /app/ROOT.war
              image: image-registry.openshift-image-registry.svc:5000/${TOOLS_NAMESPACE}/geocoder-sidecar:${GEOCODER_IS_TAG}
              imagePullPolicy: Always
              name: war
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /app
                  name: app-volume
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - emptyDir: {}
              name: tc-work
            - emptyDir: {}
              name: tc-conf
            - emptyDir: {}
              name: app-volume

  - kind: ReplicaSet
    apiVersion: apps/v1
    metadata:
      labels:
        app: ${APP_NAME}-${ENV}-admin
      name: ${APP_NAME}-${ENV}-admin
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ${APP_NAME}-${ENV}-admin
          name: ${APP_NAME}-${ENV}-admin
      template:
        metadata:
          labels:
            app: ${APP_NAME}-${ENV}-admin
            name: ${APP_NAME}-${ENV}-admin
        spec:
          containers:
            - command:
                - catalina.sh
                - run
              env:
                - name: CATALINA_BASE
                  value: /usr/local/tomcat
                - name: LogFilePath
                  value: /usr/local/tomcat/logs/bgeo.log
                - name: OLS_CASSANDRA_LOCAL_DATACENTER
                  value: DC1
                - name: OLS_CASSANDRA_CONTACT_POINT
                  value: cassandra-${APP_NAME}
              image: 'docker-remote.artifacts.developer.gov.bc.ca/tomcat:9-jre11-slim'  ##change
              pullSecret:
                name: artifactory-creds
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 45
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 8080
                timeoutSeconds: 1
              name: geocoder-admin
              ports:
                - containerPort: 8080
                  name: catalina-http
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /css/styles.css
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 55
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /usr/local/tomcat/logs
                  name: tc-work
                - mountPath: /usr/local/tomcat/work
                  name: tc-work
                - mountPath: /usr/local/tomcat/temp
                  name: tc-work
                - mountPath: /usr/local/tomcat/conf/Catalina
                  name: tc-conf
                - mountPath: /usr/local/tomcat/webapps
                  name: app-volume
          dnsPolicy: ClusterFirst
          initContainers:
            - command:
                - cp
                - /ols-admin.war
                - /app/ROOT.war
              image: image-registry.openshift-image-registry.svc:5000/${TOOLS_NAMESPACE}/ols-admin-sidecar:${DATA_ADMIN_IS_TAG}
              imagePullPolicy: Always
              name: war
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /app
                  name: app-volume
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - emptyDir: {}
              name: tc-work
            - emptyDir: {}
              name: tc-conf
            - emptyDir: {}
              name: app-volume

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: deny-by-default
    spec:
      # The default posture for a security first namespace is to
      # deny all traffic. If not added this rule will be added
      # by Platform Services during environment cut-over.
      podSelector: {}
      ingress: []

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-from-openshift-ingress
    spec:
      # This policy allows any pod with a route & service combination
      # to accept traffic from the OpenShift router pods. This is
      # required for things outside of OpenShift (like the Internet)
      # to reach your pods.
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
      podSelector: {}
      policyTypes:
        - Ingress

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-same-namespace
    spec:
      # Allow all pods within the current namespace to communicate
      # to one another.
      podSelector:
      ingress:
      - from:
        - podSelector: {}

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-traffic-from-gateway-to-${APP_NAME}-${ENV}
    spec:
      # Allow all ingress from the namesapce hosting the Kong API gateway
      # to the geocoder pods - 264e6f is the namespace hosting Kong
      podSelector:
        matchLabels:
          app: ${APP_NAME}-${ENV}-web
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  environment: test
                  name: 264e6f
        - from:
            - namespaceSelector:
                matchLabels:
                  environment: prod
                  name: 264e6f
