apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: geocoder-template
metadata:
  name: geocoder-template

  annotations:
    openshift.io/display-name: "DataBC Geocoder API"
    description: >-
      An example Geocoder API application with
      a Data Admin WebApp and a Geocoder API. For more information
      about using this template, including OpenShift considerations, see
      https://docs.openshift.com/container-platform/4.6/openshift_images/using-templates.html.


      WARNING: Any data stored will be lost upon pod destruction. Only use this
      template for testing."
    openshift.io/long-description: >-
      This template defines resources needed to develop a Geoccoder API
      application, including a build configuration, application DeploymentConfig, and
      configuration database DeploymentConfig.  The database is stored in
      persistent storage.

    tags: "geocoder,java,gis,location"
    iconClass: icon-spring
    openshift.io/provider-display-name: "Data Systems and Services, DataBC"
    openshift.io/documentation-url: "https://github.com/bcgov/ols-geocoder"
    openshift.io/support-url: "https://access.redhat.com"
message: |-
  Your admin credentials are ${ADMIN_USERNAME}:${ADMIN_PASSWORD}
  The following objects have been created in you project:

  Deployment
    ${APP_NAME}-${ENV}-web   - Geocoder Web API
    ${APP_NAME}-${ENV}-admin - Admin WebApp

  Service
    ${APP_NAME}-${ENV}-web   - Geocoder Web API
    ${APP_NAME}-${ENV}-admin - Admin WebApp

  Route
    N/A - Routes are configured with the Kong Gateway

  DeploymentConfig
    N/A

  Deployment
    N/A

  NetworkPolicy
    allow-from-openshift-ingress
    allow-same-namespace
    deny-by-default
    allow-traffic-from-gateway-to-${APP_NAME}-${ENV}

parameters:

  - name: "APP_NAME"
    description: "name of app"
    value: geocoder
    required: true
  - name: "ENV"
    description: "environment"
    value: dev
    required: true
  - name: "TOOLS_NAMESPACE"
    description: "tools namespace where build will be"
    value: tools_namespace
    required: true

  - name: "GEOCODER_IS_TAG"
    description: "The image stream tag to use for the geocoder-sidecar"
    required: true
  - name: "DATA_ADMIN_IS_TAG"
    description: "The image stream tag to use for the ols-admin-sidecar"
    required: true

objects:
  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ENV}-admin-route
      labels:
        app: ${APP_NAME}-${ENV}-admin
    spec:
      host: ${APP_NAME}-admin-${ENV}.apps.silver.devops.gov.bc.ca
      to:
        kind: Service
        name: ${APP_NAME}-${ENV}-admin-service
        weight: 100
      port:
        targetPort: ${APP_NAME}-${ENV}-admin
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None

  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ENV}-web-route
      labels:
        app: ${APP_NAME}-${ENV}-web
        template: ${APP_NAME}-template
    spec:
      host: ${APP_NAME}-${ENV}.apps.silver.devops.gov.bc.ca
      to:
        kind: Service
        name: ${APP_NAME}-${ENV}-web-service
        weight: 100
      port:
        targetPort: ${APP_NAME}-${ENV}-web
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None
    status:
      ingress:
        - host: ${APP_NAME}-${ENV}.apps.silver.devops.gov.bc.ca
          routerName: default
          conditions:
            - type: Admitted
              status: 'True'
          wildcardPolicy: None
          routerCanonicalHostname: router-default.apps.silver.devops.gov.bc.ca

  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: ${APP_NAME}-${ENV}-web
      name: ${APP_NAME}-${ENV}-web-service
    spec:
      ports:
        - name: ${APP_NAME}-${ENV}-web
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: ${APP_NAME}-${ENV}-web
      sessionAffinity: None
      type: ClusterIP

  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: ${APP_NAME}-${ENV}-admin
      name: ${APP_NAME}-${ENV}-admin-service
    spec:
      ports:
        - name: ${APP_NAME}-${ENV}-admin
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app: ${APP_NAME}-${ENV}-admin
      sessionAffinity: None
      type: ClusterIP

  - kind: Deployment
    apiVersion: apps/v1
    metadata:
     annotations:
       image.openshift.io/triggers: >-
         [{"from":{"kind":"ImageStreamTag","name":"geocoder-sidecar:${ENV}","namespace":"988040-tools"},"fieldPath":"spec.template.spec.containers[?(@.name==\"api\")].image"}]
     name: ${APP_NAME}-${ENV}-web
     labels:
       app: ${APP_NAME}-${ENV}-web
       template: ${APP_NAME}-template
    spec:
     replicas: 1
     selector:
       matchLabels:
         app: ${APP_NAME}-${ENV}-web
     template:
       metadata:
         creationTimestamp: null
         labels:
           app: ${APP_NAME}-${ENV}-web
       spec:
         volumes:
          - name: tc-work
            emptyDir: {}
          - name: tc-conf
            emptyDir: {}
          - name: geocoder-config
            persistentVolumeClaim:
              claimName: bgeo-configs
         containers:
           - resources:
               limits:
                 cpu: '2'
                 memory: 8Gi
             readinessProbe:
               httpGet:
                 path: /ping
                 port: 8080
                 scheme: HTTP
               initialDelaySeconds: 255
               timeoutSeconds: 1
               periodSeconds: 10
               successThreshold: 1
               failureThreshold: 3
             terminationMessagePath: /dev/termination-log
             name: api
             command:
               - catalina.sh
               - run
             livenessProbe:
               tcpSocket:
                 port: 8080
               initialDelaySeconds: 45
               timeoutSeconds: 1
               periodSeconds: 10
               successThreshold: 1
               failureThreshold: 3
             env:
              - name: CATALINA_BASE
                value: /usr/local/tomcat
              - name: LogFilePath
                value: /usr/local/tomcat/logs/bgeo.log
              - name: OLS_FILE_CONFIGURATION_URL
                value: file://apps/config/geocoder/app-configs/
              - name: OLS_GEOCODER_CONFIGURATION_STORE
                value: ca.bc.gov.ols.geocoder.config.FileGeocoderConfigurationStore
             ports:
               - name: catalina-http
                 containerPort: 8080
                 protocol: TCP
             imagePullPolicy: IfNotPresent
             volumeMounts:
                - name: tc-work
                  mountPath: /usr/local/tomcat/logs
                - name: tc-work
                  mountPath: /usr/local/tomcat/work
                - name: tc-work
                  mountPath: /usr/local/tomcat/temp
                - name: tc-conf
                  mountPath: /usr/local/tomcat/conf/Catalina
                - name: geocoder-config
                  mountPath: /apps/config/geocoder
             terminationMessagePolicy: File
             image: >-
               image-registry.openshift-image-registry.svc:5000/988040-tools/geocoder-sidecar:${GEOCODER_IS_TAG}
         restartPolicy: Always
         terminationGracePeriodSeconds: 30
         dnsPolicy: ClusterFirst
         securityContext: {}
         schedulerName: default-scheduler
     strategy:
       type: Recreate
     revisionHistoryLimit: 10
     progressDeadlineSeconds: 600

  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      annotations:
        image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"ols-admin-sidecar:${ENV}","namespace":"988040-tools"},"fieldPath":"spec.template.spec.containers[?(@.name==\"geocoder-admin\")].image"}]
      name: ${APP_NAME}-${ENV}-admin
      generation: 1
      labels:
        app: ${APP_NAME}-${ENV}-admin
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ${APP_NAME}-${ENV}-admin
          name: ${APP_NAME}-${ENV}-admin
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${APP_NAME}-${ENV}-admin
            name: ${APP_NAME}-${ENV}-admin
        spec:
          volumes:
            - name: tc-work
              emptyDir: {}
            - name: tc-conf
              emptyDir: {}
            - name: geocoder-config
              persistentVolumeClaim:
                claimName: bgeo-configs
          containers:
            - resources: {}
              readinessProbe:
                httpGet:
                  path: /css/styles.css
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 55
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              terminationMessagePath: /dev/termination-log
              name: ${APP_NAME}-admin
              command:
                - catalina.sh
                - run
              livenessProbe:
                tcpSocket:
                  port: 8080
                initialDelaySeconds: 45
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              env:
                - name: CATALINA_BASE
                  value: /usr/local/tomcat
                - name: LogFilePath
                  value: /usr/local/tomcat/logs/bgeo.log
                - name: OLS_FILE_CONFIGURATION_URL
                  value: file://apps/config/geocoder/app-configs/
                - name: OLS_GEOCODER_CONFIGURATION_STORE
                  value: ca.bc.gov.ols.geocoder.config.FileGeocoderConfigurationStore
              ports:
                - name: catalina-http
                  containerPort: 8080
                  protocol: TCP
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: tc-work
                  mountPath: /usr/local/tomcat/logs
                - name: tc-work
                  mountPath: /usr/local/tomcat/work
                - name: tc-work
                  mountPath: /usr/local/tomcat/temp
                - name: tc-conf
                  mountPath: /usr/local/tomcat/conf/Catalina
                - name: geocoder-config
                  mountPath: /apps/config/geocoder
              terminationMessagePolicy: File
              image: >-
                image-registry.openshift-image-registry.svc:5000/988040-tools/ols-admin-sidecar:${DATA_ADMIN_IS_TAG}
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
      strategy:
        type: Recreate
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600

  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${APP_NAME}-${ENV}-data-provider-monitor
      generation: 1
      labels:
        app: ${APP_NAME}-${ENV}-data-provider-monitor
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: ${APP_NAME}-${ENV}-data-provider-monitor
          name: ${APP_NAME}-${ENV}-data-provider-monitor
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${APP_NAME}-${ENV}-data-provider-monitor
            name: ${APP_NAME}-${ENV}-data-provider-monitor
        spec:
          volumes:
            - name: bgeo-configs
              persistentVolumeClaim:
                claimName: bgeo-configs
            - name: bgeo-mc
              persistentVolumeClaim:
                claimName: bgeo-mc
          containers:
            - resources:
                limits:
                  cpu: 250m
                  memory: 1Gi
                requests:
                  cpu: 50m
                  memory: 256Mi
              terminationMessagePath: /dev/termination-log
              name: ${APP_NAME}-data-provider-monitor
              env:
                - name: MINIO_ROOT_USER
                  valueFrom:
                    secretKeyRef:
                      name: minio-data-integration-pipeline-datastore
                      key: minioAccessKey
                - name: MINIO_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: minio-data-integration-pipeline-datastore
                      key: minioSecretKey
              ports:
                - containerPort: 9000
                  protocol: TCP
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: bgeo-configs
                  mountPath: /data
                - name: bgeo-mc
                  mountPath: /.mc
              terminationMessagePolicy: File
              image: >-
                image-registry.openshift-image-registry.svc:5000/988040-tools/minio-client:latest
              args:
                - -C
                - /data
                - server
                - /data
              readinessProbe:
                httpGet:
                  path: /minio/health/ready
                  port: 9000
                  scheme: HTTP
                initialDelaySeconds: 120
                periodSeconds: 15
                timeoutSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              lifecycle:
                postStart:
                  exec:
                    command:
                      - "sh"
                      - "-c"
                      - >
                        mc alias set geocoder-prod https://minio-geocoder-datastore-prod.apps.silver.devops.gov.bc.ca/ $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;
                        mc cp geocoder-prod/app-configs/ /data/app-configs/;
                        nohup mc mirror --watch /data/app-configs/ geocoder-prod/app-configs/
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
      strategy:
        type: Recreate
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: bgeo-configs
      finalizers:
        - kubernetes.io/pvc-protection
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 100Mi
      storageClassName: netapp-file-standard
      volumeMode: Filesystem
    status:
      phase: Bound
      accessModes:
        - ReadWriteMany
      capacity:
        storage: 100Mi
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: bgeo-mc
      finalizers:
        - kubernetes.io/pvc-protection
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
      storageClassName: netapp-file-standard
      volumeMode: Filesystem
    status:
      phase: Bound
      accessModes:
        - ReadWriteOnce
      capacity:
        storage: 100Mi

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: deny-by-default
    spec:
      # The default posture for a security first namespace is to
      # deny all traffic. If not added this rule will be added
      # by Platform Services during environment cut-over.
      podSelector: {}
      ingress: []

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-from-openshift-ingress
    spec:
      # This policy allows any pod with a route & service combination
      # to accept traffic from the OpenShift router pods. This is
      # required for things outside of OpenShift (like the Internet)
      # to reach your pods.
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
      podSelector: {}
      policyTypes:
        - Ingress

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-same-namespace
    spec:
      # Allow all pods within the current namespace to communicate
      # to one another.
      podSelector:
      ingress:
      - from:
        - podSelector: {}

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-traffic-from-gateway-to-${APP_NAME}-${ENV}
    spec:
      # Allow all ingress from the namesapce hosting the Kong API gateway
      # to the geocoder pods - 264e6f is the namespace hosting Kong
      podSelector:
        matchLabels:
          app: ${APP_NAME}-${ENV}-web
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  environment: test
                  name: 264e6f
        - from:
            - namespaceSelector:
                matchLabels:
                  environment: prod
                  name: 264e6f
