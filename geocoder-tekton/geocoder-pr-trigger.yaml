nameOverride: ""
fullnameOverride: ""
#serviceAccountName: pipeline
configMaps:
- artifactorySettingsXml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <settings
      xmlns="http://maven.apache.org/SETTINGS/1.0.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://maven.apache.org/SETTINGS/1.0.0
        http://maven.apache.org/xsd/settings-1.0.0.xsd
      ">
      <localRepository>/workspace/.m2/repository/</localRepository>
      <profiles>
        <profile>
          <id>citz-artifactory</id>
          <activation>
            <activeByDefault>true</activeByDefault>
          </activation>
          <repositories>
            <repository>
              <id>delivery.bcgov</id>
              <name>BC Government Repository</name>
              <url>https://delivery.apps.gov.bc.ca/artifactory/repo/</url>
              <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
              </releases>
              <snapshots>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
              </snapshots>
            </repository>
          </repositories>
        </profile>
      </profiles>
    </settings>
# PVCs:
#   - name: pip-tkt-m2-pvc
#     accessModes: ReadWriteMany
#     volumeMode: Filesystem
#     storage: 2Gi


tasks:

  - name: copy-file
    workspaces:
    - name: source
    - name: file
    steps:
      - image: ubuntu:latest
        name: copy-file
        script: |
          #!/usr/bin/env sh
          cp /workspace/source/atp_addresses.csv /workspace/file/atp_addresses.csv
  - name: acquire-mutex
    workspaces:
    - name: source
    steps:
      - image: quay.io/openshift/origin-cli:latest
        name: mutex
        script: |
          #!/usr/bin/env bash
          cd /workspace/source/
          echo "kind: ConfigMap" > mutex.yaml
          echo "apiVersion: v1" >> mutex.yaml
          echo "metadata:" >> mutex.yaml
          echo "  name: mutex" >> mutex.yaml
          echo "data:" >> mutex.yaml
          echo "mutex: 'on'" >> mutex.yaml
          echo "---Waiting for mutex---"
          sh -c 'until $(oc create -f mutex.yaml &>/dev/null); do printf '.'; sleep 5; done;'
          echo "---Mutex acquired---"
  - name: release-mutex
    workspaces:
    - name: source
    steps:
      - image: quay.io/openshift/origin-cli:latest
        name: mutex
        script: |
          #!/usr/bin/env sh
          oc delete configmap mutex
          echo "---Mutex released---"
  - name: tests-helm
    params:
      - name: api_url
        type: string
    workspaces:
    - name: source
    - name: pr
    - name: file
    steps:
      - image: registry.fedoraproject.org/f33/python3:latest
        name: pytest
        env:
        - name: API_URL
          value: $(params.api_url)
        script: |
          #!/usr/bin/env sh
          cd /workspace/pr/
          mkdir -p comments
          cd /workspace/source/geocoder-testing
          python -m pip install pytest
          python -m pip install requests
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          python -m pytest --maxfail=10 --api_url=$API_URL > /workspace/pr/comments/$NOW
  - name: cli-build-helm
    params:
      - name: git-revision
        type: string
      - name: image-tag
        type: string
      - name: route-url
        type: string
      - name: ns
        type: string
    volumes:
      - name: m2-vol
        persistentVolumeClaim: pip-tkt-m2-pvc
    workspaces:
    - name: source
    steps:
      - image: quay.io/openshift/origin-cli:latest
        name: image-build
        volumeMounts:
          - name: m2-vol
            mountPath: /workspace/m2-content
        env:
        - name: GIT_REVISION
          value: $(params.git-revision)
        - name: IMG_TAG
          value: $(params.image-tag)
        - name: ROUTE_URL
          value: $(params.route-url)
        - name: NAME_SPACE
          value: $(params.ns)
        script: |
          #!/usr/bin/env sh
          echo "---Moving .war to staging area---"
          cd /workspace/source/
          rm -rf war1 || true
          rm -rf war2 || true
          mkdir war1
          mkdir war2
          git_rev=$(echo "$GIT_REVISION")
          cp "/workspace/m2-content/ca/bc/gov/ols/ols-geocoder-admin/${git_rev}/ols-geocoder-admin-${git_rev}.war" /workspace/source/war1/ols-admin.war
          cp "/workspace/m2-content/ca/bc/gov/ols/ols-geocoder-web/${git_rev}/ols-geocoder-web-${git_rev}.war" /workspace/source/war2/geocoder.war

          echo "--Commencing the build--"
          oc start-build geocoder-sidecar --from-dir=/workspace/source/war2 --wait
          oc tag geocoder-sidecar:latest geocoder-sidecar:$IMG_TAG

          oc start-build ols-admin-sidecar --from-dir=/workspace/source/war1 --wait
          oc tag ols-admin-sidecar:latest ols-admin-sidecar:$IMG_TAG

          sh -c 'until $(curl --output /dev/null --silent --head --fail $ROUTE_URL); do printf '.'; sleep 5; done;'
          echo "---Geocoder is up in test namespace---"
  - name: maven-helm
    params:
    - name: git-revision
      type: string
    volumes:
    - name: m2-vol
      persistentVolumeClaim: pip-tkt-m2-pvc
    - name: conf-vol
      configMap: maven-settings
    workspaces:
      - name: source
      - name: pr
    steps:
      - name: build
        image: maven:3.8.1-jdk-11-slim
        script: |
          #!/usr/bin/env bash
          /usr/bin/mvn versions:set -s /workspace/.m2/settings.xml -DnewVersion=$GIT_REVISION -DgroupId='*' -DgenerateBackupPoms=false
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          /usr/bin/mvn install -Dmaven.test.skip=true -s /workspace/.m2/settings.xml > /workspace/pr/comments/$NOW
          if [[ "$?" -eq 0 ]] ; then
            rm /workspace/pr/comments/$NOW;
          fi
          echo "---Maven build complete---"
        env:
        - name: GIT_REVISION
          value: $(params.git-revision)
        - name: MAVEN_OPTS
          value: "-server -Xms256m -Xmx512m -XX:MetaspaceSize=96m -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -XX:+UseParallelOldGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90"
        volumeMounts:
        - name: conf-vol
          mountPath: /workspace/.m2
        - name: m2-vol
          mountPath: /workspace/.m2/repository
        workingDir: /workspace/source
        resources:
          requests:
            memory: 500Mi
            cpu: 250m
          limits:
            memory: 3Gi
            cpu: "2"

pipelines:
  - name: geocoder-merge
    triggerName: geocoder-trigger-pr-merged
    bindingName: geocoder-binding-pr-merged
    serviceAccountName:
      - pipelineTaskName: image-build
        taskServiceAccountName: pipeline
    pipeline_params:
      - name: git-revision
        type: string
        description: pull request head commit id
        default: main
        incomingValue: $(body.pull_request.head.sha)
        resourceTemplate: $(tt.params.git-revision)
      - name: ns
        description: namespace used for dev deployment
        type: string
        default: f8d638-dev
      - name: image-tag
        description: image deployment trigger tag
        type: string
        default: dev
      - name: route-url
        type: string
        description: api url subject to testing
        default: https://geomark-tomcat-f8d638-dev.apps.silver.devops.gov.bc.ca/pub/geomark/geomarks/
    workspaces:
      - name: shared-workspace
        volumeClaimTemplate: 2Gi
    tasks:
      - name: get-mutex
        ref:
          name: acquire-mutex
        workspaces:
        - name: source
          workspace: shared-workspace
      - name: image-build
        ref:
          name: cli-build-helm
        runAfter:
          - get-mutex
        workspaces:
        - name: source
          workspace: shared-workspace
        params:
          - name: git-revision
            value: $(params.git-revision)
          - name: image-tag
            value: $(params.image-tag)
          - name: route-url
            value: $(params.route-url)
          - name: ns
            value: 988040-dev
    finally:
      - name: free-mutex
        ref:
          name: release-mutex
        workspaces:
        - name: source
          workspace: shared-workspace
  - name: geocoder-clone-repo
    triggerName: geocoder-trigger-pr-open
    bindingName: geocoder-binding-pr-open
    serviceAccountName:
      - pipelineTaskName: clone-repo
        taskServiceAccountName: git-bot
      - pipelineTaskName: maven-build
        taskServiceAccountName: pipeline
      - pipelineTaskName: pull-groundtruth
        taskServiceAccountName: git-bot
      - pipelineTaskName: pull-tests
        taskServiceAccountName: git-bot
      - pipelineTaskName: run-tests
        taskServiceAccountName: pipeline

    pipeline_params:
      - name: git-url
        type: string
        description: git repo url
        default: https://github.com/bcgov/ols-geocoder.git
      - name: git-revision
        type: string
        description: pull request head commit id
        default: main
        incomingValue: $(body.pull_request.head.sha)
        resourceTemplate: $(tt.params.git-revision)
      - name: pr-url
        description: pull request url
        type: string
        incomingValue: $(body.pull_request.html_url)
        resourceTemplate: $(tt.params.pr-url)
      - name: route-url
        type: string
        description: test query to check that the app is alive
        default: https://geocoder-test.apps.silver.devops.gov.bc.ca/
      - name: health-check-url
        type: string
        description: test query to check that the app is alive
        default: https://geocoder-test.apps.silver.devops.gov.bc.ca/addresses.json?addressString=525+Superior+St%09+Victoria%09+BC
      - name: git-auth-token
        description: machine account auth token used for pushing content
        type: string
        default: github-auth-token
      - name: ns
        description: namespace used for test deployment
        type: string
        default: 988040-test
      - name: image-tag
        description: image deployment trigger tag
        type: string
        default: test
    workspaces:
      - name: shared-workspace
        volumeClaimTemplate: 2Gi
      - name: input
      - name: test-file
        volumeClaimTemplate: 200Mi
      - name: pr-content
        volumeClaimTemplate: 50Mi
    podTemplate:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
    tasks:
      - name: clone-repo
        workspaces:
          - name: output
            workspace: shared-workspace
        ref:
          kind: ClusterTask
          name: git-clone
        params:
          - name: url
            value: $(params.git-url)
          - name: revision
            value: $(params.git-revision)
      - name: pull-pr-meta
        ref:
          name: pull-request
          kind: ClusterTask
        workspaces:
        - name: pr
          workspace: pr-content
        params:
        - name: url
          value: $(params.pr-url)
        - name: secret-key-ref
          value: github-auth-token
        - name: mode
          value: download
        - name: provider
          value: github
        runAfter:
        - clone-repo
      - name: maven-build
        ref:
          name: maven-helm
        params:
        - name: git-revision
          value: $(params.git-revision)
        runAfter:
          - pull-pr-meta
        workspaces:
        - name: source
          workspace: shared-workspace
        - name: pr
          workspace: pr-content
      - name: get-mutex
        ref:
          name: acquire-mutex
        workspaces:
        - name: source
          workspace: shared-workspace
        runAfter:
        - maven-build
      - name: image-build
        ref:
          name: cli-build-helm
        runAfter:
          - get-mutex
        workspaces:
        - name: source
          workspace: shared-workspace
        params:
          - name: git-revision
            value: $(params.git-revision)
          - name: image-tag
            value: $(params.image-tag)
          - name: route-url
            value: $(params.health-check-url)
          - name: ns
            value: $(params.ns)
      - name: pull-groundtruth
        ref:
          name: git-cli
          kind: ClusterTask
        runAfter:
          - image-build
        workspaces:
        - name: source
          workspace: shared-workspace
        - name: input
          workspace: input
        params:
        - name: GIT_SCRIPT
          value: |
            git reset --hard && git clean -f && git fetch origin && git checkout -b gh-pages origin/gh-pages
      - name: copy-groundtruth
        ref:
          name: copy-file
        runAfter:
          - pull-groundtruth
        workspaces:
        - name: source
          workspace: shared-workspace
        - name: file
          workspace: test-file
      - name: pull-tests
        ref:
          name: git-cli
          kind: ClusterTask
        runAfter:
          - copy-groundtruth
        workspaces:
        - name: source
          workspace: shared-workspace
        - name: input
          workspace: input
        params:
        - name: GIT_SCRIPT
          value: |
            git reset --hard && git clean -f && git fetch origin && git checkout -b tools origin/tools-test
      - name: run-tests
        ref:
          name: tests-helm
        runAfter:
          - pull-tests
        workspaces:
        - name: file
          workspace: test-file
        - name: source
          workspace: shared-workspace
        - name: pr
          workspace: pr-content
        params:
        - name: api_url
          value: $(params.route-url)
    finally:
      - name: free-mutex
        ref:
          name: release-mutex
        workspaces:
        - name: source
          workspace: shared-workspace
      - name: notify-test-results
        ref:
          name: pull-request
          kind: ClusterTask
        workspaces:
        - name: pr
          workspace: pr-content
        params:
        - name: url
          value: $(params.pr-url)
        - name: secret-key-ref
          value: $(params.git-auth-token)
        - name: mode
          value: upload
        - name: provider
          value: github
events:
  install: true
  defaultRB: false
  listeners:
    - name: geocoder-listener-helm
      triggers:
        - name: pr-open-trigger
          trigger: geocoder-trigger-pr-open
          binding: geocoder-binding-pr-open
          interceptors:
            - name: github
              eventTypes:
                - name: pull_request
              secretName: github-secret
            - name: cel
              filter: "body.action in ['opened', 'reopened']"
        - name: pr-merge-trigger
          trigger: geocoder-trigger-pr-merged
          binding: geocoder-binding-pr-merged
          interceptors:
            - name: github
              eventTypes:
                - name: pull_request
              secretName: github-secret
            - name: cel
              filter: "body.action in ['closed']"
            - name: cel
              filter: "body.pull_request.merged"
      ingress:
        enabled: true
        name: geocoder-ingress-helm
        annotations:
          openshift.io/host.generated: 'true'
        host: el-geocoder-listener-helm-988040-tools.apps.silver.devops.gov.bc.ca
        service: el-geocoder-listener-helm
